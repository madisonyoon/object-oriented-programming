class Fraction:

def __init__(self,numerator:int=1,denominator:int=1)->None:
  if denominator==0;
     raise ValueError('Denominator cannot be zero.')
  self.__numerator=numerator
  self.__denominator=denominator

@property
def numerator(self)
    return self.__numerator

@property
def denominator(self)
    return self.__denominator
    
def add(self,other:"Fraction"->"Fraction":
   n=self.__numerator*other.__denominator+self.__denominator*other.numerator
   d=self.__denominator+other.__denominator

   return Fraction(n.d)
  
def multiply(self,other:"Fraction")->"Fraction":
   n=self.__numerator*other.numerator
   d=self.__denominator*other.__denominator

   return Fraction(n,d)

def __str__(self)->str:
   return f"{self.__numerator}/{self.__denominator}"

f__name__=='__main__':
  f1=Fraction(3,4)
  f2=Fraction(1,3)
  f3=f1.add(f2)
  print(f'{f1}+{f2}={f3}')
  f4=f1.multiply(f2)
  print(f'{f1}*{f2}={f4}')
